---
# Source: sentry/templates/sentry/configmap-sentry.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sentry-sentry
  labels:
    app: sentry
    chart: "sentry-27.2.4"
    release: "sentry"
    heritage: "Helm"
    app.kubernetes.io/name: sentry
    app.kubernetes.io/instance: sentry
    app.kubernetes.io/version: "25.8.0"
data:
  config.yml: |-
    # This URL will be used to tell Symbolicator where to obtain the Sentry source.
    # See https://getsentry.github.io/symbolicator/api/
    system.internal-url-prefix: 'http://sentry-web:9000'
    symbolicator.enabled: false

    ##########
    # Github #
    ##########

    ##########
    # Google #
    ##########

    #########
    # Slack #
    #########

    ###########
    # Discord #
    ###########

    #########
    # Redis #
    #########
    # This is configured in the sentry.conf.py as that has support for environment variables.

    ################
    # File storage #
    ################
    # Uploaded media uses these `filestore` settings. The available
    # backends are either `filesystem` or `s3`.
    filestore.backend: "filesystem"
    filestore.options:
      location: "/var/lib/sentry/files"
  sentry.conf.py: "from sentry.conf.server import *  # NOQA\nfrom distutils.util import strtobool\n\nBYTE_MULTIPLIER = 1024\nUNITS = (\"K\", \"M\", \"G\")\ndef unit_text_to_bytes(text):\n    unit = text[-1].upper()\n    power = UNITS.index(unit) + 1\n    return float(text[:-1])*(BYTE_MULTIPLIER**power)\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"sentry.db.postgres\",\n        \"NAME\": os.environ.get(\"POSTGRES_NAME\", \"\"),\n        \"USER\": os.environ.get(\"POSTGRES_USER\", \"\"),\n        \"PASSWORD\": os.environ.get(\"POSTGRES_PASSWORD\", \"\"),\n        \"HOST\": os.environ.get(\"POSTGRES_HOST\", \"\"),\n        \"PORT\": os.environ.get(\"POSTGRES_PORT\", \"\"),\n        \"CONN_MAX_AGE\": 0,\n    }\n}\n\n# You should not change this setting after your database has been created\n# unless you have altered all schemas first\nSENTRY_USE_BIG_INTS = True\n\n###########\n# General #\n###########\n\n# Disable sends anonymous usage statistics\nSENTRY_BEACON = False\n\nsecret_key = env('SENTRY_SECRET_KEY')\nif not secret_key:\n  raise Exception('Error: SENTRY_SECRET_KEY is undefined')\n\nSENTRY_OPTIONS['system.secret-key'] = secret_key\n\n# Set default for SAMPLED_DEFAULT_RATE:\nSAMPLED_DEFAULT_RATE = 1\n\n# Instruct Sentry that this install intends to be run by a single organization\n# and thus various UI optimizations should be enabled.\nSENTRY_SINGLE_ORGANIZATION = True\n\nSENTRY_OPTIONS[\"system.event-retention-days\"] = int(env('SENTRY_EVENT_RETENTION_DAYS') or \"90\")\n\n#########\n# Redis #\n#########\n\n# Generic Redis configuration used as defaults for various things including:\n# Buffers, Quotas, TSDB\nSENTRY_OPTIONS[\"redis.clusters\"] = {\n  \"default\": {\n    \"hosts\": {\n      0: {\n        \"host\": \"sentry-sentry-redis-master\",\n        \"password\": os.environ.get(\"REDIS_PASSWORD\", \"\"),\n        \"port\": \"6379\",\n        \"db\": \"0\"\n      }\n    }\n  }\n}\n\n#########\n# Queue #\n#########\n\n# See https://docs.getsentry.com/on-premise/server/queue/ for more\n# information on configuring your queue broker and workers. Sentry relies\n# on a Python framework called Celery to manage queues.\nBROKER_URL = os.environ.get(\"BROKER_URL\", \"amqp://guest:guest@sentry-rabbitmq:5672//\")\n\n#########\n# Cache #\n#########\n\n# Sentry currently utilizes two separate mechanisms. While CACHES is not a\n# requirement, it will optimize several high throughput patterns.\n\n# CACHES = {\n#     \"default\": {\n#         \"BACKEND\": \"django.core.cache.backends.memcached.MemcachedCache\",\n#         \"LOCATION\": [\"memcached:11211\"],\n#         \"TIMEOUT\": 3600,\n#     }\n# }\n\n# A primary cache is required for things such as processing events\nSENTRY_CACHE = \"sentry.cache.redis.RedisCache\"\n\nDEFAULT_KAFKA_OPTIONS = {\n    \"common\": {\n        \"bootstrap.servers\": \"sentry-kafka:9092\",\n        \"message.max.bytes\": 50000000,\n        \"socket.timeout.ms\": 1000,\n        \"security.protocol\": \"PLAINTEXT\",\n    }\n}\n\nSENTRY_EVENTSTREAM = \"sentry.eventstream.kafka.KafkaEventStream\"\nSENTRY_EVENTSTREAM_OPTIONS = {\"producer_configuration\": DEFAULT_KAFKA_OPTIONS}\n\nKAFKA_CLUSTERS[\"default\"] = DEFAULT_KAFKA_OPTIONS\n\n###############\n# Rate Limits #\n###############\n\n# Rate limits apply to notification handlers and are enforced per-project\n# automatically.\n\nSENTRY_RATELIMITER = \"sentry.ratelimits.redis.RedisRateLimiter\"\n\n##################\n# Update Buffers #\n##################\n\n# Buffers (combined with queueing) act as an intermediate layer between the\n# database and the storage API. They will greatly improve efficiency on large\n# numbers of the same events being sent to the API in a short amount of time.\n# (read: if you send any kind of real data to Sentry, you should enable buffers)\n\nSENTRY_BUFFER = \"sentry.buffer.redis.RedisBuffer\"\n\n##########\n# Quotas #\n##########\n\n# Quotas allow you to rate limit individual projects or the Sentry install as\n# a whole.\n\nSENTRY_QUOTAS = \"sentry.quotas.redis.RedisQuota\"\n\n########\n# TSDB #\n########\n\n# The TSDB is used for building charts as well as making things like per-rate\n# alerts possible.\n\nSENTRY_TSDB = \"sentry.tsdb.redissnuba.RedisSnubaTSDB\"\n\n#########\n# SNUBA #\n#########\n\nSENTRY_SEARCH = \"sentry.search.snuba.EventsDatasetSnubaSearchBackend\"\nSENTRY_SEARCH_OPTIONS = {}\nSENTRY_TAGSTORE_OPTIONS = {}\n\n###########\n# Digests #\n###########\n\n# The digest backend powers notification summaries.\n\nSENTRY_DIGESTS = \"sentry.digests.backends.redis.RedisBackend\"\n\n###################\n# Metrics Backend #\n###################\n\nSENTRY_RELEASE_HEALTH = \"sentry.release_health.metrics.MetricsReleaseHealthBackend\"\nSENTRY_RELEASE_MONITOR = \"sentry.release_health.release_monitor.metrics.MetricReleaseMonitorBackend\"\n\n##############\n# Web Server #\n##############\nSENTRY_WEB_HOST = \"0.0.0.0\"\n\n\nSENTRY_WEB_PORT = 9000\nSENTRY_PUBLIC = False\nSENTRY_WEB_OPTIONS = {\n    \"http\": \"%s:%s\" % (SENTRY_WEB_HOST, SENTRY_WEB_PORT),\n    \"protocol\": \"uwsgi\",\n    # This is needed to prevent https://git.io/fj7Lw\n    \"uwsgi-socket\": None,\n    # Keep this between 15s-75s as that's what Relay supports\n    \"http-keepalive\": 15,\n    \"http-chunked-input\": True,\n    # the number of web workers\n    'workers': 3,\n    # Turn off memory reporting\n    \"memory-report\": False,\n    # Some stuff so uwsgi will cycle workers sensibly\n    'max-requests': 100000,\n    'max-requests-delta': 500,\n    'max-worker-lifetime': 86400,\n    # Duplicate options from sentry default just so we don't get\n    # bit by sentry changing a default value that we depend on.\n    'thunder-lock': True,\n    'log-x-forwarded-for': False,\n    'buffer-size': 32768,\n    'limit-post': 209715200,\n    'disable-logging': True,\n    'reload-on-rss': 600,\n    'ignore-sigpipe': True,\n    'ignore-write-errors': True,\n    'disable-write-exception': True,\n}\n\n###########\n# SSL/TLS #\n###########\n\n# If you're using a reverse SSL proxy, you should enable the X-Forwarded-Proto\n# header and enable the settings below\n\n# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n# SESSION_COOKIE_SECURE = True\n# CSRF_COOKIE_SECURE = True\n# SOCIAL_AUTH_REDIRECT_IS_HTTPS = True\n\n# End of SSL/TLS settings\n\n############\n# Features #\n############\n\n\nSENTRY_FEATURES = {\n  \"auth:register\": True\n}\nSENTRY_FEATURES[\"projects:sample-events\"] = False\nSENTRY_FEATURES.update(\n    {\n        feature: True\n        for feature in (\"organizations:discover\",\n            \"organizations:global-views\",\n            \"organizations:incidents\",\n            \"organizations:integrations-issue-basic\",\n            \"organizations:integrations-issue-sync\",\n            \"organizations:invite-members\",\n            \"organizations:sso-basic\",\n            \"organizations:sso-saml2\",\n            \"organizations:advanced-search\",\n            \"organizations:issue-platform\",\n            \"organizations:monitors\",\n            \"organizations:dashboards-mep\",\n            \"organizations:mep-rollout-flag\",\n            \"organizations:dashboards-rh-widget\",\n            \"organizations:dynamic-sampling\",\n            \"projects:custom-inbound-filters\",\n            \"projects:data-forwarding\",\n            \"projects:discard-groups\",\n            \"projects:plugins\",\n            \"projects:rate-limits\",\n            \"projects:servicehooks\",\n        )\n        + (\n            # Session Replay related flags\n            \"organizations:session-replay\",\n            \n            # flags added in this chart\n            \"organizations:session-replay-ui\",\n            \"organizations:session-replay-issue-emails\",\n            \"organizations:session-replay-recording-scrubbing\",\n            \"organizations:session-replay-slack-new-issue\",\n        )\n        + (\n            # Flags enabled in this chart but not present in https://github.com/getsentry/self-hosted/blob/master/sentry/sentry.conf.example.py\n            \"organizations:related-events\",\n            \"organizations:reprocessing-v2\",\n            \"organizations:set-grouping-config\",\n            \"organizations:onboarding\",\n            \"projects:similarity-indexing\",\n            \"projects:similarity-view\",\n        )\n        + (\n            # Custom features from values\n        )\n    }\n)\n\n#######################\n# Email Configuration #\n#######################\nSENTRY_OPTIONS['mail.backend'] = os.getenv(\"SENTRY_EMAIL_BACKEND\", \"dummy\")\nSENTRY_OPTIONS['mail.use-tls'] = bool(strtobool(os.getenv(\"SENTRY_EMAIL_USE_TLS\", \"false\")))\nSENTRY_OPTIONS['mail.use-ssl'] = bool(strtobool(os.getenv(\"SENTRY_EMAIL_USE_SSL\", \"false\")))\nSENTRY_OPTIONS['mail.username'] = os.getenv(\"SENTRY_EMAIL_USERNAME\", \"\")\nSENTRY_OPTIONS['mail.password'] = os.getenv(\"SENTRY_EMAIL_PASSWORD\", \"\")\nSENTRY_OPTIONS['mail.port'] = int(os.getenv(\"SENTRY_EMAIL_PORT\", \"25\"))\nSENTRY_OPTIONS['mail.host'] = os.getenv(\"SENTRY_EMAIL_HOST\", \"\")\nSENTRY_OPTIONS['mail.from'] = os.getenv(\"SENTRY_EMAIL_FROM\", \"\")\n\n#######################\n# Filestore S3 Configuration #\n#######################\n\n#########################\n# Bitbucket Integration #\n#########################\n\n# BITBUCKET_CONSUMER_KEY = 'YOUR_BITBUCKET_CONSUMER_KEY'\n# BITBUCKET_CONSUMER_SECRET = 'YOUR_BITBUCKET_CONSUMER_SECRET'\n\n#########\n# Relay #\n#########\nSENTRY_RELAY_WHITELIST_PK = []\nSENTRY_RELAY_OPEN_REGISTRATION = True\n\n#########\n# Tasks #\n#########\n# Disable taskworker and continue using celery.\nSENTRY_OPTIONS[\"taskworker.enabled\"] = False\n\n#######################\n# OpenAi Suggestions #\n#######################\n\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\", \"\")\nif OPENAI_API_KEY:\n  SENTRY_FEATURES[\"organizations:open-ai-suggestion\"] = True\n\n# No Python Extension Config Given"
